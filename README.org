GUI for the [[https://github.com/Francesco149/cubecalc][average cubing chances calculator]] for MapleStory.

the idea is that through the graph you can configure it for any complicated stat combination you're looking for as well as have multiple calculations for different combinations on screen.

check out the presets combo box in the bottom/right bar for common setups

* usage
** web version
- just use the [[https://francesco149.github.io/maple/cube][hosted version here]] .
** AppImage: almost every linux distro
- download the AppImage from the [[https://github.com/Francesco149/cubecalc-ui/releases][latest releases]]
- on most distros, you can just ~chmod +x cubecalc-ui-*.AppImage~ and run it.
- on NixOS you need to also install ~appimage-run~ and use it to run it, but I recommend just using nix as described below for NixOS.
** nix: linux, WSL, probably macOS too?
- [[https://nix.dev/tutorials/install-nix][install the nix package manager]]
- ~nix run github:Francesco149/cubecalc-ui~
- you might need to use [[https://github.com/guibou/nixGL][NixGL]] on non-nixos distros to fix library errors
- this builds the calculator from source code
** windows
- download the exe (x86 for 32-bit, x86_64 for 64-bit) from the [[https://github.com/Francesco149/cubecalc-ui/releases][latest releases]]

* navigating the code (for developers)
this is a quite unusual stack. the UI is written in C using [[https://github.com/Immediate-Mode-UI/Nuklear][nuklear]], the cubing calculator is also written in C, and it's all running in a browser. a lot of the code is generated from the python proof-of-concept of the cubing calc that I initially wrote. I am planning to make a desktop build for this now that I got rid of all python code

emscripten is used to compile the C ui to wasm. see ~src/build.sh~.

to set up the dev environment, [[https://nix.dev/tutorials/install-nix][install the nix package manager]] and run ~nix develop~, you will be put into a shell with all the dependencies installed.

to build the project, cd into ~src~ and type ~./build.sh emcc~

you should be able to see the result at [[http://0.0.0.0:6969/test]]

for an optimized release build, do ~./build.sh emcc release~

~publish.sh~ is used to copy the emscripten compiled version to my github.io page

I am trying to get meson to build the emscripten version, so it can be easily deployed with nix

for quick iterative desktop builds, do ~./build.sh tcc~ (fastest build time)

for optimized desktop build,s do ~./build.sh clang release~

* cross compiling to windows (arch)
#+BEGIN_SRC sh
  sudo pacman -Sy git base-devel --needed

  git clone https://aur.archlinux.org/trizen.git
  cd trizen
  makepkg -si
  trizen -Sy mingw-w64 mingw-w64-glfw

  cd
  git clone https://github.com/Francesco149/cubecalc-ui
  cd cubecalc-ui/src
  meson setup --cross-file x86_64-w64-mingw32.txt -Dbuildtype=release build-mingw
  meson compile -C build-mingw

  # binary is build-mingw/cubecalc-ui.exe
#+END_SRC
