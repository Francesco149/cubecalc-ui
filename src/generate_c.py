#!/usr/bin/env python3

import sys
sys.path.append("./cubecalc/src/")
from common import *
from glue_common import CalcParam, CalcOperator
from math import log2

header = ""
body = ""

def body_print(x):
  global body
  body += f"{x}\n"

def hdr_print(x):
  global header
  header += f"{x}\n"

hdr_print("#include <stdint.h>")
hdr_print("typedef uint64_t generatedU64;")

for en in [Cube, Category, Line, CalcParam, CalcOperator, Tier, Region]:
  n = en.__name__.lower()
  vals = [x for x in en]
  exclude = {}
  inttype = "int"
  intprefix = ""
  if en == Line:
    vals = [x for x in LineMasks] + vals
    exclude = {
      ANY, MAINSTAT, FLAT_MAINSTAT, AUTOSTEAL_1, AUTOSTEAL_2, FLAT_DEX_ONLY, MESO_ONLY, DROP_ONLY,
      DROP_MESO, LINE_A, LINE_B, LINE_C,
      HEAL_HP_MP, HEAL_HP_ONLY, HEAL_MP_ONLY,
      HEAL_HP_MP_NEAR, HEAL_HP_ONLY_NEAR, HEAL_MP_ONLY_NEAR,
      HEAL_HP_MP_PARTY, HEAL_HP_ONLY_PARTY, HEAL_MP_ONLY_PARTY,
    }
  elif en == Category:
    exclude = {LINE_CACHE, NAME, DEFAULT_CUBE}
  elif en == Tier:
    exclude = {BASE}

  vals = [x for x in vals if x not in exclude]
  num_vals = len(vals)

  if len([x for x in vals if x >= 0x7FFFFFFF]) > 0:
    inttype = "generatedU64"
    intprefix = "UINT64_C"

  hdr_print(f"extern char const* {n}Names[{num_vals}];")
  body_print(f"char const* {n}Names[{num_vals}] = {{")
  if en == Category:
    vals.sort(reverse=False, key=lambda x: category_name(x))
    for x in vals:
      body_print(f"  \"{category_name(x)}\",")
  else:
    if en != Tier:
      vals.sort(reverse=False, key=lambda x: x.name)
    for x in vals:
      vn = x.name.lower().replace("_", " ")
      body_print(f"  \"{vn}\",")
  body_print("};")

  hdr_print(f"extern {inttype} {n}Values[{num_vals}];")
  body_print(f"{inttype} {n}Values[{num_vals}] = {{")
  for x in vals:
    body_print(f"  {intprefix}({x.value}),")
  body_print("};")
  for i, x in enumerate(vals):
    hdr_print(f"#define {x.name} {i}")

  if en == Cube:
    hdr_print(f"extern int tierLimits[{num_vals}];")
    body_print(f"int tierLimits[{num_vals}] = {{")
    for x in vals:
      limit = tier_limits[x] if x in tier_limits else LEGENDARY
      body_print(f"  {limit},")
    body_print("};")

maxlen = 0
maxtext = ""
num_lines = len(Line)
hdr_print(f"extern char const* allLineNames[{num_lines}];")
body_print(f"char const* allLineNames[{num_lines}] = {{")
for x in Line:
  i = int(log2(x.value))
  s = x.name.strip().replace("_", " ").lower()
  if len(s) > maxlen:
    maxlen = len(s)
    maxtext = s
  body_print(f"  [{i}] = \"{s}\",")
body_print("};")

hdr_print(f"#define MAX_LINENAME {maxlen}")
hdr_print(f"#define MAX_LINETEXT \"{maxtext}\"")

discl = ""
discl_len = 0
with open("./cubecalc/cubechances.txt") as f:
  f.readline()
  f.readline()
  for line in f:
    if line.startswith("="):
      break
    s = line.strip()
    discl += (f"\"{s}\\n\"")
    discl_len += len(s) + 1

discl_len += 1
hdr_print(f"extern char disclaimer[{discl_len}];")
body_print(f"char disclaimer[{discl_len}] = ")
body_print(discl)
body_print(";")


print(f"/* generated by {sys.argv[0]}, do not edit */")
print("#ifndef GENERATED_H")
print(header)
print("#define GENERATED_H")
print("#endif")
print("#if defined(GENERATED_IMPLEMENTATION) && !defined(GENERATED_UNIT)")
print("#define GENERATED_UNIT")
print(body)
print("#endif")
