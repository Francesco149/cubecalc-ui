#!/usr/bin/env python3

import sys
sys.path.append("./cubecalc/src/")
from common import *
from glue_common import CalcParam

print(f"/* generated by {sys.argv[0]}, do not edit */")
for en in [Cube, Category, Line, CalcParam, Tier, Region]:
  n = en.__name__.lower()
  print(f"char const* {n}Names[] = {{")
  vals = [x for x in en]
  exclude = {}
  inttype = "int"
  intsuffix = ""
  if en == Line:
    vals = [x for x in LineMasks] + vals
    exclude = {
      ANY, MAINSTAT, FLAT_MAINSTAT, AUTOSTEAL_1, AUTOSTEAL_2, FLAT_DEX_ONLY, MESO_ONLY, DROP_ONLY,
      DROP_MESO, LINE_A, LINE_B, LINE_C,
      HEAL_HP_MP, HEAL_HP_ONLY, HEAL_MP_ONLY,
      HEAL_HP_MP_NEAR, HEAL_HP_ONLY_NEAR, HEAL_MP_ONLY_NEAR,
      HEAL_HP_MP_PARTY, HEAL_HP_ONLY_PARTY, HEAL_MP_ONLY_PARTY,
    }
  elif en == Category:
    exclude = {LINE_CACHE, NAME, DEFAULT_CUBE}
  elif en == Tier:
    exclude = {BASE}

  vals = [x for x in vals if x not in exclude]
  if len([x for x in vals if x >= 0x7FFFFFFF]) > 0:
    inttype = "i64"
    intsuffix = "ll"

  if en == Category:
    vals.sort(reverse=False, key=lambda x: category_name(x))
    for x in vals:
      print(f"  \"{category_name(x)}\",")
  else:
    if en != Tier:
      vals.sort(reverse=False, key=lambda x: x.name)
    for x in vals:
      vn = x.name.lower().replace("_", " ")
      print(f"  \"{vn}\",")
  print("};")
  print(f"{inttype} {n}Values[] = {{")
  for x in vals:
    print(f"  {x.value}{intsuffix},")
  print("};")
  for i, x in enumerate(vals):
    print(f"#define {x.name} {i}")

  if en == Cube:
    print("int tierLimits[] = {")
    for x in vals:
      limit = tier_limits[x] if x in tier_limits else LEGENDARY
      print(f"  {limit},")
    print("};")

print("char* disclaimer = ")
with open("./cubecalc/cubechances.txt") as f:
  f.readline()
  f.readline()
  for line in f:
    if line.startswith("="):
      break
    s = line.strip()
    print(f"\"{s}\\n\"")
print(";")
